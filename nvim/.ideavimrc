" ===============================================================================
" .ideavimrc Configuration for IntelliJ IDEA / WebStorm
" ===============================================================================
" This configuration mirrors Neovim keymaps for a consistent development experience
" across editors. All keymaps are organized by functionality with clear comments.

" ------------------------------
" Leader Key Configuration
" ------------------------------
" Set Leader Key to Space (consistent with Neovim config)
let mapleader = " "

" ===============================================================================
" GENERAL NAVIGATION & FILE OPERATIONS
" ===============================================================================

" ------------------------------
" Basic File Operations
" ------------------------------
" Open Project View (Equivalent to :Ex in Neovim)
nnoremap <leader>e :action ActivateProjectToolWindow<CR>

" Quit Current Tab (Equivalent to :q in Neovim)
nnoremap <leader>q :action CloseContent<CR>

" Save All Files (Equivalent to :w in Neovim)
nnoremap <leader>w :action SaveAll<CR>

" ------------------------------
" Undo/Redo Operations
" ------------------------------
" Undo (Consistent with Neovim mapping)
nnoremap <C-z> :action $Undo<CR>

" Redo (Consistent with Neovim mapping)
nnoremap <C-r> :action $Redo<CR>

" ------------------------------
" Search Navigation
" ------------------------------
" Next Search Result and Center Cursor (mirrors Neovim's nzzzv)
nnoremap n :action FindNext<CR>

" Previous Search Result and Center Cursor (mirrors Neovim's Nzzzv)
nnoremap N :action FindPrevious<CR>

" Disable 'r' in Normal Mode to Prevent Accidental Recording
nnoremap r <Nop>

" ------------------------------
" Cursor Centering
" ------------------------------
" Center cursor manually
nnoremap <leader>z :action EditorCenter<CR>

" ===============================================================================
" MOVEMENT & TEXT MANIPULATION
" ===============================================================================

" ------------------------------
" Visual Mode Block Movement
" ------------------------------
" Move Selected Block Down (mirrors Vim visual mode movement)
vnoremap J :action MoveLineDown<CR>

" Move Selected Block Up (mirrors Vim visual mode movement)
vnoremap K :action MoveLineUp<CR>

" ------------------------------
" Scrolling with Centered Cursor
" ------------------------------
" Scroll Down and Center Cursor (mirrors Neovim's <C-d>zz)
nnoremap <C-d> <C-d>

" Scroll Up and Center Cursor (mirrors Neovim's <C-u>zz)
nnoremap <C-u> <C-u>

" ------------------------------
" Text Selection
" ------------------------------
" Select Entire File Content (mirrors Neovim's ggVG)
nnoremap <C-a> :action $SelectAll<CR>

" ===============================================================================
" QUICKFIX & ERROR NAVIGATION
" ===============================================================================

" Next Error/Issue (equivalent to :cnext in Neovim)
nnoremap <C-j> :action GotoNextError<CR>

" Previous Error/Issue (equivalent to :cprev in Neovim)
nnoremap <C-k> :action GotoPreviousError<CR>

" ===============================================================================
" CLIPBOARD OPERATIONS
" ===============================================================================

" ------------------------------
" System Clipboard Integration
" ------------------------------
" Copy to System Clipboard in Visual Mode
vnoremap <leader>y "+y

" Copy Current Line to System Clipboard
nnoremap <leader>yy "+yy

" Paste from System Clipboard
nnoremap <C-v> "+p

" Copy Entire File to System Clipboard
" Note: This requires creating a macro in IntelliJ:
" 1. Go to Edit -> Macros -> Start Macro Recording
" 2. Press Ctrl+A to select all, then Ctrl+C to copy
" 3. Stop recording and name it "CopyEntireFile"
nnoremap <leader>yf :action CopyEntireFile<CR>

" ===============================================================================
" JSON & CODE FORMATTING
" ===============================================================================

" ------------------------------
" JSON Operations
" ------------------------------
" Format JSON using Reformat Code Action (equivalent to :%!jq . in Neovim)
nnoremap <leader>jq :action ReformatCode<CR>

" Run jq filter (equivalent to custom jq filter in Neovim)
" Note: This requires custom implementation or external tool integration
nnoremap <leader>jf :action ReformatCode<CR>

" JMESPath query (equivalent to heilgar.jmespath in Neovim)
" Note: Requires JSON Path plugin or custom implementation
nnoremap <leader>jp :action FindInPath<CR>

" ------------------------------
" General Code Formatting
" ------------------------------
" Format Code (equivalent to LSP formatting in Neovim)
nnoremap <leader>cf :action ReformatCode<CR>

" ===============================================================================
" TERMINAL INTEGRATION
" ===============================================================================

" Toggle Terminal (equivalent to custom terminal toggle in Neovim)
" Note: IntelliJ's terminal behavior differs from the custom Neovim function
nnoremap <C-t> :action ActivateTerminalToolWindow<CR>

" ===============================================================================
" DOCUMENTATION & HELP
" ===============================================================================

" Open docs for symbol (equivalent to utils.open_docs_for_symbol in Neovim)
nnoremap <leader>do :action QuickJavaDoc<CR>

" Clear search highlight (equivalent to :nohlsearch in Neovim)
nnoremap <leader>h :action EditorEscape<CR>

" ===============================================================================
" SYMBOL MATCHING & NAVIGATION
" ===============================================================================

" ------------------------------
" Bracket & Symbol Matching
" ------------------------------
" Jump to Matching Brace/Symbol (equivalent to custom jump function in Neovim)
nnoremap <leader>jj :action EditorMatchBrace<CR>

" Visual mode symbol matching
vnoremap <leader>jj :action EditorMatchBrace<CR>

" ===============================================================================
" LSP & CODE INTELLIGENCE
" ===============================================================================

" ------------------------------
" Navigation
" ------------------------------
" Go to Declaration (LSP equivalent)
nnoremap jD :action GotoDeclaration<CR>

" Go to Definition (LSP equivalent)
nnoremap jd :action GotoDeclaration<CR>

" Go to Implementation (LSP equivalent)
nnoremap ji :action GotoImplementation<CR>

" Find References (LSP equivalent)
nnoremap jr :action FindUsages<CR>

" Go to Type Definition (LSP equivalent)
nnoremap <leader>jt :action GotoTypeDeclaration<CR>

" ------------------------------
" Documentation & Help
" ------------------------------
" Hover Documentation (LSP equivalent)
nnoremap K :action QuickJavaDoc<CR>

" Signature Help (LSP equivalent)
nnoremap <leader>k :action ParameterInfo<CR>

" Signature Help in Insert Mode (LSP equivalent)
inoremap <C-s> :action ParameterInfo<CR>

" ------------------------------
" Refactoring & Code Actions
" ------------------------------
" Rename Symbol (LSP equivalent)
nnoremap <leader>rn :action RenameElement<CR>

" Code Action (LSP equivalent)
nnoremap <leader>ca :action ShowIntentionActions<CR>

" Smart Code Actions (equivalent to smart_code_action in Neovim)
" Organize imports
nnoremap <leader>co :action OptimizeImports<CR>

" Remove unused imports
nnoremap <leader>cu :action OptimizeImports<CR>

" Add missing imports
nnoremap <leader>cm :action ShowIntentionActions<CR>

" Fix all issues
nnoremap <leader>cx :action ShowIntentionActions<CR>

" ===============================================================================
" DIAGNOSTICS
" ===============================================================================

" Previous diagnostic
nnoremap [d :action GotoPreviousError<CR>

" Next diagnostic
nnoremap ]d :action GotoNextError<CR>

" Show diagnostic
nnoremap <leader>ld :action ShowErrorDescription<CR>

" Diagnostic quickfix
nnoremap <leader>lq :action ShowIntentionActions<CR>

" ===============================================================================
" WORKSPACE MANAGEMENT
" ===============================================================================

" Add workspace folder
nnoremap <leader>wa :action AddContentRoot<CR>

" Remove workspace folder
nnoremap <leader>wr :action RemoveContentRoot<CR>

" List workspace folders
nnoremap <leader>wl :action ProjectStructure<CR>

" ===============================================================================
" ADVANCED FEATURES
" ===============================================================================

" Toggle inlay hints (equivalent to LSP inlay hints in Neovim)
nnoremap <leader>ih :action EditorToggleShowIntentionBulb<CR>

" ===============================================================================
" DAP DEBUGGING
" ===============================================================================

" ------------------------------
" Basic Debugging Operations
" ------------------------------
" Toggle breakpoint
nnoremap <leader>db :action ToggleLineBreakpoint<CR>

" Continue debugging
nnoremap <leader>dc :action Debug<CR>

" Step into
nnoremap <leader>di :action StepInto<CR>

" Step over
nnoremap <leader>do :action StepOver<CR>

" Step out
nnoremap <leader>du :action StepOut<CR>

" Open REPL
nnoremap <leader>dr :action Debugger<CR>

" Run last
nnoremap <leader>dl :action Debug<CR>

" Terminate debugging
nnoremap <leader>dt :action Stop<CR>

" Toggle DAP UI
nnoremap <leader>dui :action Debugger<CR>

" ------------------------------
" DAP Telescope Equivalents
" ------------------------------
" DAP commands
nnoremap <leader>dcc :action Debugger<CR>

" DAP configurations
nnoremap <leader>dco :action EditConfigurations<CR>

" List breakpoints
nnoremap <leader>dbl :action ViewBreakpoints<CR>

" DAP variables
nnoremap <leader>dva :action Debugger<CR>

" DAP frames
nnoremap <leader>dfr :action Debugger<CR>

" ------------------------------
" DAP Configuration Management
" ------------------------------
" Load DAP configs from workspace
nnoremap <leader>dlc :action EditConfigurations<CR>

" Show DAP configurations
nnoremap <leader>dsc :action EditConfigurations<CR>

" Install debugpy for DAP
nnoremap <leader>did :action ShowIntentionActions<CR>

" ===============================================================================
" TAB NAVIGATION
" ===============================================================================

" ------------------------------
" Basic Tab Navigation
" ------------------------------
" Switch to Next Tab
nnoremap <A-n> :action NextTab<CR>
nnoremap <M-n> :action NextTab<CR>

" Switch to Previous Tab
nnoremap <A-p> :action PreviousTab<CR>
nnoremap <M-p> :action PreviousTab<CR>

" ------------------------------
" Direct Tab Access (1-9)
" ------------------------------
" Switch to Specific Tabs (mirrors Neovim's tab navigation)
nnoremap <A-1> :action GoToTab1<CR>
nnoremap <A-2> :action GoToTab2<CR>
nnoremap <A-3> :action GoToTab3<CR>
nnoremap <A-4> :action GoToTab4<CR>
nnoremap <A-5> :action GoToTab5<CR>
nnoremap <A-6> :action GoToTab6<CR>
nnoremap <A-7> :action GoToTab7<CR>
nnoremap <A-8> :action GoToTab8<CR>
nnoremap <A-9> :action GoToTab9<CR>

" Meta key alternatives for different systems
nnoremap <M-1> :action GoToTab1<CR>
nnoremap <M-2> :action GoToTab2<CR>
nnoremap <M-3> :action GoToTab3<CR>
nnoremap <M-4> :action GoToTab4<CR>
nnoremap <M-5> :action GoToTab5<CR>
nnoremap <M-6> :action GoToTab6<CR>
nnoremap <M-7> :action GoToTab7<CR>
nnoremap <M-8> :action GoToTab8<CR>
nnoremap <M-9> :action GoToTab9<CR>

" ------------------------------
" Tab Cycling & Management
" ------------------------------
" Cycle to Next Tab (alternative binding)
nnoremap <A-]> :action NextTab<CR>
nnoremap <M-]> :action NextTab<CR>

" Cycle to Previous Tab (alternative binding)
nnoremap <A-[> :action PreviousTab<CR>
nnoremap <M-[> :action PreviousTab<CR>

" Create New Tab (equivalent to :tabnew in Neovim)
nnoremap <A-t> :action NewTab<CR>
nnoremap <M-t> :action NewTab<CR>

" Close Current Tab (equivalent to :tabclose in Neovim)
nnoremap <A-w> :action CloseContent<CR>
nnoremap <M-w> :action CloseContent<CR>

" ===============================================================================
" GIT INTEGRATION
" ===============================================================================

" ------------------------------
" Git Status & Overview
" ------------------------------
" Open Git Status (equivalent to :Git in Neovim with fugitive)
nnoremap <leader>gs :action Vcs.Show.Local.Changes<CR>

" ------------------------------
" Diff Operations
" ------------------------------
" Open Diffview (equivalent to DiffviewOpen in Neovim)
nnoremap <leader>go :action Compare.SameVersion<CR>

" Close Diffview (equivalent to DiffviewClose in Neovim)
nnoremap <leader>gq :action CloseActiveTab<CR>

" Git File History (equivalent to DiffviewFileHistory in Neovim)
nnoremap <leader>gh :action Vcs.ShowTabbedFileHistory<CR>

" Compare with Branch (equivalent to custom branch comparison in Neovim)
nnoremap <leader>gc :action Git.CompareWithBranch<CR>

" ===============================================================================
" SEARCH & FIND OPERATIONS
" ===============================================================================

" ------------------------------
" File Search (Telescope Equivalents)
" ------------------------------
" Find Files (equivalent to Telescope find_files)
nnoremap <leader>ff :action GotoFile<CR>

" Git Files (equivalent to Telescope git_files)
nnoremap <C-p> :action GotoFile<CR>

" Show Commands (equivalent to Telescope commands)
nnoremap <leader>tc :action GotoAction<CR>

" Find in Files (global search)
nnoremap <leader>fg :action FindInPath<CR>

" ------------------------------
" Text Search Operations
" ------------------------------
" Search Occurrences of Word Under Cursor
nnoremap <leader>sw :action FindWordAtCaret<CR>

" Search Occurrences of WORD Under Cursor (extended word search)
nnoremap <leader>sW :action FindWordAtCaret<CR>

" Search with User Input (equivalent to live grep in Telescope)
nnoremap <leader>ss :action FindInPath<CR>

" Search Occurrences of Visual Selection
vnoremap <leader>sv :action FindSelectionInPath<CR>

" ===============================================================================
" ADVANCED REFACTORING
" ===============================================================================

" ------------------------------
" Refactoring Menu & Operations
" ------------------------------
" Show Refactor Menu
nnoremap <leader>rh :action Refactorings.QuickListPopupAction<CR>

" Extract Method/Function
vnoremap <leader>rf :action ExtractMethod<CR>

" Extract Variable
vnoremap <leader>rv :action IntroduceVariable<CR>

" Inline Variable/Method
nnoremap <leader>ri :action Inline<CR>

" ------------------------------
" Import Management
" ------------------------------
" Organize Imports (equivalent to custom organize_imports in Neovim)
nnoremap <leader>oi :action OptimizeImports<CR>

" ===============================================================================
" LINTING & FORMATTING
" ===============================================================================

" ------------------------------
" ESLint Operations
" ------------------------------
" Fix all ESLint issues (equivalent to ESLint LSP fix all in Neovim)
nnoremap <leader>ef :action Javascript.Linters.EsLint.Fix<CR>

" Format with Prettier (equivalent to LSP formatting in Neovim)
nnoremap <leader>pf :action ReformatCode<CR>

" ===============================================================================
" COMMENT OPERATIONS
" ===============================================================================

" Toggle Comment on Current Line (equivalent to comment plugin in Neovim)
nnoremap <leader>/ :action CommentByLineComment<CR>

" Toggle Comment on Selected Lines (equivalent to comment plugin in Neovim)
vnoremap <leader>/ :action CommentByLineComment<CR>

" ===============================================================================
" BOOKMARK MANAGEMENT
" ===============================================================================

" ------------------------------
" Bookmark Operations
" ------------------------------
" Add/Toggle Bookmark (equivalent to marks in Neovim)
nnoremap <leader>ba :action ToggleBookmark<CR>

" Remove Bookmark (same as toggle in IntelliJ)
nnoremap <leader>br :action ToggleBookmark<CR>

" Jump to Next Bookmark
nnoremap <leader>bj :action GotoNextBookmark<CR>

" Jump to Previous Bookmark
nnoremap <leader>bk :action GotoPreviousBookmark<CR>

" List Bookmarks (equivalent to marks list in Neovim)
nnoremap <leader>bl :action ShowBookmarks<CR>

" ===============================================================================
" MARKS & NAVIGATION
" ===============================================================================

" ------------------------------
" Mark Operations (Neovim equivalents)
" ------------------------------
" Note: IntelliJ doesn't have exact equivalents to Vim marks
" Using bookmarks as closest alternative

" List all marks/bookmarks (equivalent to :marks in Neovim)
nnoremap <leader>ml :action ShowBookmarks<CR>

" Delete all marks/bookmarks (equivalent to :delmarks! in Neovim)
nnoremap <leader>md :action Bookmarks.Delete<CR>

" ===============================================================================
" SYMBOL MATCHING & NAVIGATION
" ===============================================================================

" ------------------------------
" Bracket & Symbol Matching
" ------------------------------
" Jump to Matching Brace/Symbol (equivalent to custom jump function in Neovim)
" Note: IntelliJ's % works for basic bracket matching
nnoremap <leader>jj :action EditorMatchBrace<CR>

" Visual mode symbol matching
vnoremap <leader>jj :action EditorMatchBrace<CR>

" ===============================================================================
" SPECIAL INTEGRATIONS
" ===============================================================================

" ------------------------------
" JSON Processing
" ------------------------------
" Note: The custom JMES Path search from Neovim config doesn't have
" a direct equivalent in IntelliJ. Consider using:
" - JSON Path plugin
" - Manual JSON processing in terminal
" Placeholder for JSON search functionality:
nnoremap <leader>js :action FindInPath<CR>

" ------------------------------
" Clipboard History
" ------------------------------
" Show Clipboard History (equivalent to neoclip in Neovim)
" Note: Requires clipboard history to be enabled in IntelliJ
nnoremap <leader>fc :action PasteMultiple<CR>

" ===============================================================================
" ADDITIONAL NOTES
" ===============================================================================
"
" Key Differences from Neovim Config:
" 1. Terminal toggle behavior is different - IntelliJ manages terminal differently
" 2. Some advanced text objects and custom functions aren't available
" 3. Plugin-specific features (like JMES Path search) need alternative solutions
" 4. Mark system is replaced with bookmark system
" 5. Some LSP features work differently but provide similar functionality
" 6. DAP debugging has different UI and workflow in IntelliJ
" 7. Custom cursor centering functions need IntelliJ-specific implementations
"
" To fully utilize this config:
" 1. Enable IdeaVim plugin in IntelliJ/WebStorm
" 2. Consider installing additional plugins for enhanced functionality
" 3. Customize actions based on your specific IDE and installed plugins
" 4. Test all mappings to ensure they work with your IDE version
" 5. Some mappings may require creating custom macros or using external tools
"
" ===============================================================================

